<?xml version="1.0"?>
<!--
Software License Agreement (BSD)

\file      gazebo_description.launch
\authors   Paul Bovbel <pbovbel@clearpathrobotics.com
\copyright Copyright (c) 2015, Clearpath Robotics, Inc., All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or promote
   products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>

  <arg name="robot_namespace" default="husky"/>
  <arg name="base_global_planner" default="navfn/NavfnROS"/>
  <arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/>

  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <arg name="laser_enabled" default="$(optenv HUSKY_LMS1XX_ENABLED false)"/>
  <arg name="urdf_extras" default="$(optenv HUSKY_URDF_EXTRAS)"/>
  <arg name="kinect_enabled" default="false"/>

  <!-- <param name="robot_description" command="$(find xacro)/xacro '$(find husky_description)/urdf/husky.urdf.xacro'
    -inorder
    robot_namespace:=$(arg robot_namespace)
    laser_enabled:=$(arg laser_enabled)
    urdf_extras:=$(arg urdf_extras)
    " /> -->

  
  <group ns="$(arg robot_namespace)">
    <param name="tf_prefix" value="$(arg robot_namespace)" />

    <param name="robot_description" command="$(find xacro)/xacro '$(find husky_description)/urdf/husky.urdf.xacro'
    --inorder
    robot_namespace:=$(arg robot_namespace)
    laser_enabled:=$(arg laser_enabled)
    kinect_enabled:=$(arg kinect_enabled)
    urdf_extras:=$(arg urdf_extras)
    " />

    <!-- Load controller configuration -->
    <rosparam >
      husky_joint_publisher:
        type: "joint_state_controller/JointStateController"
        publish_rate: 50

      husky_velocity_controller:
        type: "diff_drive_controller/DiffDriveController"
        left_wheel: ['front_left_wheel', 'rear_left_wheel']
        right_wheel: ['front_right_wheel', 'rear_right_wheel']
        publish_rate: 50
        pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
        twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
        cmd_vel_timeout: 0.25
        velocity_rolling_window_size: 2

        #base_frame_id: $(arg robot_namespace)/base_link

        # Odometry fused with IMU is published by robot_localization, so
        # no need to publish a TF based on encoders alone.
        enable_odom_tf: false

        # Husky hardware provides wheel velocities
        estimate_velocity_from_position: false

        # Wheel separation and radius multipliers
        wheel_separation_multiplier: 1.875 # default: 1.0
        wheel_radius_multiplier    : 1.0 # default: 1.0

        # Velocity and acceleration limits
        # Whenever a min_* is unspecified, default to -max_*
        linear:
          x:
            has_velocity_limits    : true
            max_velocity           : 1.5   # m/s
            has_acceleration_limits: true
            max_acceleration       : 3.0   # m/s^2
        angular:
          z:
            has_velocity_limits    : true
            max_velocity           : 2.0   # rad/s
            has_acceleration_limits: true
            max_acceleration       : 6.0   # rad/s^2
      </rosparam>

    <!-- Spawn controllers -->
    <node name="base_controller_spawner" pkg="controller_manager" type="spawner"
          args="husky_joint_publisher husky_velocity_controller"/>

    <!-- Start EKF for localization 
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
      <rosparam command="load" file="$(find husky_control)/config/localization.yaml" />
    </node> -->

    <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
<!--       <remap from="robot_description" to="$(arg robot_namespace)/robot_description" /> -->
    </node>

    <node pkg="twist_mux" type="twist_mux" name="twist_mux">
      <rosparam command="load" file="$(find husky_control)/config/twist_mux.yaml" />
      <remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/>
    </node>

    <!-- Override the default control parameters, see config/empty.yaml for default. 
    <rosparam command="load" file="$(arg config_extras)" />-->


  <!-- <arg name="base_local_planner" default="base_local_planner/TrajectoryPlannerROS"/> -->

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

    <param name="base_global_planner" value="$(arg base_global_planner)"/>
    <param name="base_local_planner" value="$(arg base_local_planner)"/>  
    <rosparam file="$(find husky_navigation)/config/planner.yaml" command="load"/>


    <rosparam ns="global_costmap">
      footprint: [[-0.5, -0.33], [-0.5, 0.33], [0.5, 0.33], [0.5, -0.33]]
      footprint_padding: 0.01
      update_frequency: 4.0
      publish_frequency: 3.0
      transform_tolerance: 0.5

      resolution: 0.05

      obstacle_range: 5.5
      raytrace_range: 6.0

      #layer definitions
      static:
          map_topic: /map
          subscribe_to_updates: true

      obstacles_laser:
          observation_sources: laser
          laser: {data_type: LaserScan, clearing: true, marking: true, topic: scan, inf_is_valid: true}

      inflation:
          inflation_radius: 1.0
    </rosparam>

    <rosparam ns="local_costmap">
      footprint: [[-0.5, -0.33], [-0.5, 0.33], [0.5, 0.33], [0.5, -0.33]]
      footprint_padding: 0.01

      update_frequency: 4.0
      publish_frequency: 3.0
      transform_tolerance: 0.5

      resolution: 0.05

      obstacle_range: 5.5
      raytrace_range: 6.0

      #layer definitions
      static:
          map_topic: /map
          subscribe_to_updates: true

      obstacles_laser:
          observation_sources: laser
          laser: {data_type: LaserScan, clearing: true, marking: true, topic: scan, inf_is_valid: true}

      inflation:
          inflation_radius: 1.0
    </rosparam>

    <!-- local costmap, needs size -->
    <rosparam file="$(find husky_navigation)/config/costmap_local.yaml" command="load" ns="local_costmap" />

    <param name="local_costmap/width" value="10.0"/>
    <param name="local_costmap/height" value="10.0"/>
    <param name="local_costmap/robot_base_frame" value="/$(arg robot_namespace)/base_link"/>
    <param name="global_costmap/robot_base_frame" value="/$(arg robot_namespace)/base_link"/>
    
    <!-- global costmap with laser, for odom_navigation_demo -->
    <rosparam file="$(find husky_navigation)/config/costmap_global_laser.yaml" command="load" ns="global_costmap"/>
    <param name="global_costmap/width" value="100.0"/>
    <param name="global_costmap/height" value="100.0"/>
  </node>
    <!-- Spawn robot in gazebo -->
    <node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg x)
              -y $(arg y)
              -z $(arg z)
              -Y $(arg yaw)
              -unpause
              -urdf
              -param robot_description
              -model $(arg robot_namespace)" />

     </group>

</launch>
